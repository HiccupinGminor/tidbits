# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


def tau(n): # Found through SO
    sqroot,t = int(n**0.5),0
    for factor in range(1,sqroot+1):
            if n % factor == 0:
                    t += 2 # both factor and N/factor
    if sqroot*sqroot == n: t = t - 1 # if sqroot is a factor then we counted it twice, so subtract 1
    return t

def divisibleTriangleNumber():
	numDivisors = 1
	currentTriangle = 1
	n = 1

	while(numDivisors <= 500):

		n += 1

		currentTriangle += n # New triangle number

		if tau(currentTriangle) > numDivisors:
			numDivisors = tau(currentTriangle) 

	return currentTriangle

print divisibleTriangleNumber() # btwn 8-9 seconds
# Divisiblity is not related to the numbers of n
# Every triangular number is either divisible by three or has a remainder of 1 when divided by 9
